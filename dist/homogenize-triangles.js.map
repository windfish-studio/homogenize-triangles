{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/homogenize-triangles.js","webpack:///./node_modules/three/src/math/Math.js","webpack:///./node_modules/three/src/math/Vector3.js","webpack:///./node_modules/three/src/math/Quaternion.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Vector3","require","verts","faces","tol","slice","spatialIndex","length","splitFace","vecs","map","_f","vertIdx","segs","_v","_i","vecIndices","deltaVec","subVectors","do_split","j","orderedSegs","sort","_sa","_sb","sharedVtx","shared","forEach","_o","_vi","maxAngle","Math","max","angleTo","_oa","_ob","newVertsIdx","half","clone","multiplyScalar","newVtx","add","vtx","points","toArray","currentPath","_p","undefined","push","x","y","z","createOrShareVtx","_fb","_fc","b","e","v1","min","quaternion","_Math","DEG2RAD","PI","RAD2DEG","generateUUID","lut","toString","d0","random","d1","d2","d3","toUpperCase","clamp","euclideanModulo","mapLinear","a1","a2","b1","b2","lerp","smoothstep","smootherstep","randInt","low","high","floor","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","pow","ceil","log","LN2","floorPowerOfTwo","Quaternion","w","this","_x","_y","_z","_w","assign","slerp","qa","qb","qm","copy","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","cos","dir","sqrSin","Number","EPSILON","sin","sqrt","len","atan2","tDir","f","defineProperties","set","onChangeCallback","isQuaternion","constructor","setFromEuler","euler","update","isEuler","Error","order","c1","c2","c3","s1","s2","s3","setFromAxisAngle","axis","angle","halfAngle","setFromRotationMatrix","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","setFromUnitVectors","vFrom","vTo","dot","abs","normalize","q","acos","rotateTowards","step","inverse","conjugate","v","lengthSq","multiply","console","warn","multiplyQuaternions","premultiply","a","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","equals","fromArray","array","offset","onChange","callback","__webpack_exports__","isVector3","setScalar","scalar","setX","setY","setZ","setComponent","index","getComponent","addVectors","addScalar","addScaledVector","sub","subScalar","multiplyVectors","applyEuler","error","applyQuaternion","applyAxisAngle","applyMatrix3","applyMatrix4","qx","qy","qz","qw","ix","iy","iz","iw","project","camera","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","divide","divideScalar","clampScalar","minVal","maxVal","clampLength","round","roundToZero","negate","manhattanLength","setLength","alpha","lerpVectors","v2","cross","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","vector","projectOnPlane","planeNormal","reflect","normal","theta","distanceTo","distanceToSquared","dx","dy","dz","manhattanDistanceTo","setFromSpherical","setFromSphericalCoords","radius","phi","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","sx","setFromMatrixColumn","sy","sz","fromBufferAttribute","attribute","getX","getY","getZ"],"mappings":"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","file":"homogenize-triangles.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const {Vector3} = require('three/src/math/Vector3');\n\nmodule.exports = function homogenizeTriangles (verts, faces, tol) {\n    verts = verts.slice(0);\n    faces = faces.slice(0);\n\n    const spatialIndex = {};\n\n    for(var i = 0; i < faces.length; i += 3) {\n        let splitFace = () => {\n            const vecs = [0, 1, 2].map(_f => {\n                const vertIdx = faces[i + _f] * 3;\n                return new Vector3(\n                    verts[vertIdx],\n                    verts[vertIdx + 1],\n                    verts[vertIdx + 2]\n                );\n            });\n\n            const segs = vecs.map((_v, _i) => {\n                return {\n                    vecIndices: [_i, (_i+1)%3],\n                    deltaVec: (new Vector3()).subVectors(vecs[(_i+1)%3], _v)\n                };\n            });\n\n            let do_split = false;\n            for(var j = 0; j < 3; j++){\n                if(segs[j].deltaVec.length() > tol){\n                    do_split = true;\n                    break;\n                }\n            }\n\n            if(!do_split){\n                return;\n            }\n\n            let orderedSegs = segs.sort((_sa, _sb)=>{return (_sa.deltaVec.length() > _sb.deltaVec.length())? -1 : 1}).slice(0,2);\n            let sharedVtx = null;\n\n            //find the vertex shared by the two longest edges\n            const shared = {};\n            orderedSegs.forEach(_o => {\n                _o.vecIndices.forEach(_vi => {\n                    shared[_vi] = shared[_vi] || 0;\n                    shared[_vi]++;\n\n                    if(shared[_vi] == 2){\n                        sharedVtx = _vi;\n                    }\n                });\n            });\n\n            //ensure orderedSegs is always in CCW order\n            const maxAngle = (_o) => {\n                Math.max(\n                    vecs[sharedVtx].angleTo(vecs[_o.vecIndices[0]]),\n                    vecs[sharedVtx].angleTo(vecs[_o.vecIndices[1]])\n                );\n            };\n\n            orderedSegs = orderedSegs.sort((_oa, _ob) => {\n                return (maxAngle(_oa) < maxAngle(_ob))? -1 : 1;\n            });\n\n            const createOrShareVtx = (vtx) => {\n                const points = vtx.toArray();\n                let currentPath = spatialIndex;\n\n                points.forEach((_p, _i) => {\n                    if(_i == (points.length - 1)){\n                        if(currentPath[_p] === undefined){\n                            verts.push(vtx.x, vtx.y, vtx.z);\n                            currentPath[_p] = (verts.length / 3) - 1;\n                        }\n                    }else{\n                        currentPath[_p] = currentPath[_p] || {};\n                    }\n\n                    currentPath = currentPath[_p];\n                });\n\n                return currentPath;\n            };\n\n            //create two new vertices\n            const newVertsIdx = orderedSegs.map(_o => {\n                const half = _o.deltaVec.clone().multiplyScalar(0.5);\n\n                const newVtx = vecs[_o.vecIndices[0]].clone();\n                newVtx.add(half);\n\n                return createOrShareVtx(newVtx);\n\n            });\n\n            //rearrange the faces\n            const _fb = i + ((sharedVtx + 1) % 3);\n            const _fc = i + ((sharedVtx + 2) % 3);\n            const b = faces[_fb];\n            const c = faces[_fc];\n            const d = newVertsIdx[0];\n            const e = newVertsIdx[1];\n\n            faces[_fb] = e;\n            faces[_fc] = d;\n\n            faces.push(e, b, c);\n            faces.push(d, e, c);\n\n            return splitFace();\n        };\n\n        splitFace();\n    }\n\n    return {\n        verts: verts,\n        faces: faces\n    }\n};","/**\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar _Math = {\n\n\tDEG2RAD: Math.PI / 180,\n\tRAD2DEG: 180 / Math.PI,\n\n\tgenerateUUID: ( function () {\n\n\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n\t\tvar lut = [];\n\n\t\tfor ( var i = 0; i < 256; i ++ ) {\n\n\t\t\tlut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\n\n\t\t}\n\n\t\treturn function generateUUID() {\n\n\t\t\tvar d0 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d1 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d2 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d3 = Math.random() * 0xffffffff | 0;\n\t\t\tvar uuid = lut[ d0 & 0xff ] + lut[ d0 >> 8 & 0xff ] + lut[ d0 >> 16 & 0xff ] + lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t\tlut[ d1 & 0xff ] + lut[ d1 >> 8 & 0xff ] + '-' + lut[ d1 >> 16 & 0x0f | 0x40 ] + lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t\tlut[ d2 & 0x3f | 0x80 ] + lut[ d2 >> 8 & 0xff ] + '-' + lut[ d2 >> 16 & 0xff ] + lut[ d2 >> 24 & 0xff ] +\n\t\t\t\tlut[ d3 & 0xff ] + lut[ d3 >> 8 & 0xff ] + lut[ d3 >> 16 & 0xff ] + lut[ d3 >> 24 & 0xff ];\n\n\t\t\t// .toUpperCase() here flattens concatenated strings to save heap memory space.\n\t\t\treturn uuid.toUpperCase();\n\n\t\t};\n\n\t} )(),\n\n\tclamp: function ( value, min, max ) {\n\n\t\treturn Math.max( min, Math.min( max, value ) );\n\n\t},\n\n\t// compute euclidian modulo of m % n\n\t// https://en.wikipedia.org/wiki/Modulo_operation\n\n\teuclideanModulo: function ( n, m ) {\n\n\t\treturn ( ( n % m ) + m ) % m;\n\n\t},\n\n\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\n\tmapLinear: function ( x, a1, a2, b1, b2 ) {\n\n\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n\t},\n\n\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\n\tlerp: function ( x, y, t ) {\n\n\t\treturn ( 1 - t ) * x + t * y;\n\n\t},\n\n\t// http://en.wikipedia.org/wiki/Smoothstep\n\n\tsmoothstep: function ( x, min, max ) {\n\n\t\tif ( x <= min ) return 0;\n\t\tif ( x >= max ) return 1;\n\n\t\tx = ( x - min ) / ( max - min );\n\n\t\treturn x * x * ( 3 - 2 * x );\n\n\t},\n\n\tsmootherstep: function ( x, min, max ) {\n\n\t\tif ( x <= min ) return 0;\n\t\tif ( x >= max ) return 1;\n\n\t\tx = ( x - min ) / ( max - min );\n\n\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n\t},\n\n\t// Random integer from <low, high> interval\n\n\trandInt: function ( low, high ) {\n\n\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n\t},\n\n\t// Random float from <low, high> interval\n\n\trandFloat: function ( low, high ) {\n\n\t\treturn low + Math.random() * ( high - low );\n\n\t},\n\n\t// Random float from <-range/2, range/2> interval\n\n\trandFloatSpread: function ( range ) {\n\n\t\treturn range * ( 0.5 - Math.random() );\n\n\t},\n\n\tdegToRad: function ( degrees ) {\n\n\t\treturn degrees * _Math.DEG2RAD;\n\n\t},\n\n\tradToDeg: function ( radians ) {\n\n\t\treturn radians * _Math.RAD2DEG;\n\n\t},\n\n\tisPowerOfTwo: function ( value ) {\n\n\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n\t},\n\n\tceilPowerOfTwo: function ( value ) {\n\n\t\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n\t},\n\n\tfloorPowerOfTwo: function ( value ) {\n\n\t\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n\t}\n\n};\n\n\nexport { _Math };\n","import { _Math } from './Math.js';\nimport { Quaternion } from './Quaternion.js';\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author kile / http://kile.stravaganza.org/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n\nfunction Vector3( x, y, z ) {\n\n\tthis.x = x || 0;\n\tthis.y = y || 0;\n\tthis.z = z || 0;\n\n}\n\nObject.assign( Vector3.prototype, {\n\n\tisVector3: true,\n\n\tset: function ( x, y, z ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetScalar: function ( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\n\t\treturn this;\n\n\t},\n\n\tsetX: function ( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t},\n\n\tsetY: function ( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t},\n\n\tsetZ: function ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t},\n\n\tsetComponent: function ( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tgetComponent: function ( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t},\n\n\tcopy: function ( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\n\t\treturn this;\n\n\t},\n\n\tadd: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\n\t\treturn this;\n\n\t},\n\n\taddScalar: function ( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\n\t\treturn this;\n\n\t},\n\n\taddVectors: function ( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\n\t\treturn this;\n\n\t},\n\n\taddScaledVector: function ( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\n\t\treturn this;\n\n\t},\n\n\tsub: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tsubScalar: function ( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\n\t\treturn this;\n\n\t},\n\n\tsubVectors: function ( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t}\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyScalar: function ( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\n\t\treturn this;\n\n\t},\n\n\tmultiplyVectors: function ( a, b ) {\n\n\t\tthis.x = a.x * b.x;\n\t\tthis.y = a.y * b.y;\n\t\tthis.z = a.z * b.z;\n\n\t\treturn this;\n\n\t},\n\n\tapplyEuler: function () {\n\n\t\tvar quaternion = new Quaternion();\n\n\t\treturn function applyEuler( euler ) {\n\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t\t}\n\n\t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\n\n\t\t};\n\n\t}(),\n\n\tapplyAxisAngle: function () {\n\n\t\tvar quaternion = new Quaternion();\n\n\t\treturn function applyAxisAngle( axis, angle ) {\n\n\t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\n\n\t\t};\n\n\t}(),\n\n\tapplyMatrix3: function ( m ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\treturn this;\n\n\t},\n\n\tapplyMatrix4: function ( m ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\treturn this;\n\n\t},\n\n\tapplyQuaternion: function ( q ) {\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t// calculate quat * vector\n\n\t\tvar ix = qw * x + qy * z - qz * y;\n\t\tvar iy = qw * y + qz * x - qx * z;\n\t\tvar iz = qw * z + qx * y - qy * x;\n\t\tvar iw = - qx * x - qy * y - qz * z;\n\n\t\t// calculate result * inverse quat\n\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\treturn this;\n\n\t},\n\n\tproject: function ( camera ) {\n\n\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\n\n\t},\n\n\tunproject: function ( camera ) {\n\n\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\n\n\t},\n\n\ttransformDirection: function ( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\t\t// vector interpreted as a direction\n\n\t\tvar x = this.x, y = this.y, z = this.z;\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\treturn this.normalize();\n\n\t},\n\n\tdivide: function ( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\n\t\treturn this;\n\n\t},\n\n\tdivideScalar: function ( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t},\n\n\tmin: function ( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\n\t\treturn this;\n\n\t},\n\n\tmax: function ( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\n\t\treturn this;\n\n\t},\n\n\tclamp: function ( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\treturn this;\n\n\t},\n\n\tclampScalar: function () {\n\n\t\tvar min = new Vector3();\n\t\tvar max = new Vector3();\n\n\t\treturn function clampScalar( minVal, maxVal ) {\n\n\t\t\tmin.set( minVal, minVal, minVal );\n\t\t\tmax.set( maxVal, maxVal, maxVal );\n\n\t\t\treturn this.clamp( min, max );\n\n\t\t};\n\n\t}(),\n\n\tclampLength: function ( min, max ) {\n\n\t\tvar length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t},\n\n\tfloor: function () {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tceil: function () {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tround: function () {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\n\t\treturn this;\n\n\t},\n\n\troundToZero: function () {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\treturn this;\n\n\t},\n\n\tnegate: function () {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t},\n\n\t// TODO lengthSquared?\n\n\tlengthSq: function () {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t},\n\n\tmanhattanLength: function () {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t},\n\n\tnormalize: function () {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t},\n\n\tsetLength: function ( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t},\n\n\tlerp: function ( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\treturn this;\n\n\t},\n\n\tlerpVectors: function ( v1, v2, alpha ) {\n\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\n\n\t},\n\n\tcross: function ( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\treturn this.crossVectors( v, w );\n\n\t\t}\n\n\t\treturn this.crossVectors( this, v );\n\n\t},\n\n\tcrossVectors: function ( a, b ) {\n\n\t\tvar ax = a.x, ay = a.y, az = a.z;\n\t\tvar bx = b.x, by = b.y, bz = b.z;\n\n\t\tthis.x = ay * bz - az * by;\n\t\tthis.y = az * bx - ax * bz;\n\t\tthis.z = ax * by - ay * bx;\n\n\t\treturn this;\n\n\t},\n\n\tprojectOnVector: function ( vector ) {\n\n\t\tvar scalar = vector.dot( this ) / vector.lengthSq();\n\n\t\treturn this.copy( vector ).multiplyScalar( scalar );\n\n\t},\n\n\tprojectOnPlane: function () {\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function projectOnPlane( planeNormal ) {\n\n\t\t\tv1.copy( this ).projectOnVector( planeNormal );\n\n\t\t\treturn this.sub( v1 );\n\n\t\t};\n\n\t}(),\n\n\treflect: function () {\n\n\t\t// reflect incident vector off plane orthogonal to normal\n\t\t// normal is assumed to have unit length\n\n\t\tvar v1 = new Vector3();\n\n\t\treturn function reflect( normal ) {\n\n\t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t\t};\n\n\t}(),\n\n\tangleTo: function ( v ) {\n\n\t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( _Math.clamp( theta, - 1, 1 ) );\n\n\t},\n\n\tdistanceTo: function ( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t},\n\n\tdistanceToSquared: function ( v ) {\n\n\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t},\n\n\tmanhattanDistanceTo: function ( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t},\n\n\tsetFromSpherical: function ( s ) {\n\n\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\n\n\t},\n\n\tsetFromSphericalCoords: function ( radius, phi, theta ) {\n\n\t\tvar sinPhiRadius = Math.sin( phi ) * radius;\n\n\t\tthis.x = sinPhiRadius * Math.sin( theta );\n\t\tthis.y = Math.cos( phi ) * radius;\n\t\tthis.z = sinPhiRadius * Math.cos( theta );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromCylindrical: function ( c ) {\n\n\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\n\n\t},\n\n\tsetFromCylindricalCoords: function ( radius, theta, y ) {\n\n\t\tthis.x = radius * Math.sin( theta );\n\t\tthis.y = y;\n\t\tthis.z = radius * Math.cos( theta );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrixPosition: function ( m ) {\n\n\t\tvar e = m.elements;\n\n\t\tthis.x = e[ 12 ];\n\t\tthis.y = e[ 13 ];\n\t\tthis.z = e[ 14 ];\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrixScale: function ( m ) {\n\n\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\tthis.x = sx;\n\t\tthis.y = sy;\n\t\tthis.z = sz;\n\n\t\treturn this;\n\n\t},\n\n\tsetFromMatrixColumn: function ( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t},\n\n\tequals: function ( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\n\t\treturn array;\n\n\t},\n\n\tfromBufferAttribute: function ( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\n\t\treturn this;\n\n\t}\n\n} );\n\n\nexport { Vector3 };\n","/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n */\n\nimport { _Math } from './Math.js';\n\nfunction Quaternion( x, y, z, w ) {\n\n\tthis._x = x || 0;\n\tthis._y = y || 0;\n\tthis._z = z || 0;\n\tthis._w = ( w !== undefined ) ? w : 1;\n\n}\n\nObject.assign( Quaternion, {\n\n\tslerp: function ( qa, qb, qm, t ) {\n\n\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t},\n\n\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n\t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\tvar s = 1 - t,\n\n\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t}\n\n\t\t\tvar tDir = t * dir;\n\n\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t// Normalize in case we just did a lerp:\n\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\tx0 *= f;\n\t\t\t\ty0 *= f;\n\t\t\t\tz0 *= f;\n\t\t\t\tw0 *= f;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdst[ dstOffset ] = x0;\n\t\tdst[ dstOffset + 1 ] = y0;\n\t\tdst[ dstOffset + 2 ] = z0;\n\t\tdst[ dstOffset + 3 ] = w0;\n\n\t}\n\n} );\n\nObject.defineProperties( Quaternion.prototype, {\n\n\tx: {\n\n\t\tget: function () {\n\n\t\t\treturn this._x;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._x = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t}\n\n\t},\n\n\ty: {\n\n\t\tget: function () {\n\n\t\t\treturn this._y;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._y = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t}\n\n\t},\n\n\tz: {\n\n\t\tget: function () {\n\n\t\t\treturn this._z;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._z = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t}\n\n\t},\n\n\tw: {\n\n\t\tget: function () {\n\n\t\t\treturn this._w;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._w = value;\n\t\t\tthis.onChangeCallback();\n\n\t\t}\n\n\t}\n\n} );\n\nObject.assign( Quaternion.prototype, {\n\n\tisQuaternion: true,\n\n\tset: function ( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t},\n\n\tcopy: function ( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromEuler: function ( euler, update ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tvar cos = Math.cos;\n\t\tvar sin = Math.sin;\n\n\t\tvar c1 = cos( x / 2 );\n\t\tvar c2 = cos( y / 2 );\n\t\tvar c3 = cos( z / 2 );\n\n\t\tvar s1 = sin( x / 2 );\n\t\tvar s2 = sin( y / 2 );\n\t\tvar s3 = sin( z / 2 );\n\n\t\tif ( order === 'XYZ' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t} else if ( order === 'YZX' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'XZY' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t}\n\n\t\tif ( update !== false ) this.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t// assumes axis is normalized\n\n\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromRotationMatrix: function ( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33,\n\t\t\ts;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromUnitVectors: function ( vFrom, vTo ) {\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tvar EPS = 0.000001;\n\n\t\tvar r = vFrom.dot( vTo ) + 1;\n\n\t\tif ( r < EPS ) {\n\n\t\t\tr = 0;\n\n\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\tthis._y = vFrom.x;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = r;\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\tthis._z = vFrom.y;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\tthis._w = r;\n\n\t\t}\n\n\t\treturn this.normalize();\n\n\t},\n\n\tangleTo: function ( q ) {\n\n\t\treturn 2 * Math.acos( Math.abs( _Math.clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t},\n\n\trotateTowards: function ( q, step ) {\n\n\t\tvar angle = this.angleTo( q );\n\n\t\tif ( angle === 0 ) return this;\n\n\t\tvar t = Math.min( 1, step / angle );\n\n\t\tthis.slerp( q, t );\n\n\t\treturn this;\n\n\t},\n\n\tinverse: function () {\n\n\t\t// quaternion is assumed to have unit length\n\n\t\treturn this.conjugate();\n\n\t},\n\n\tconjugate: function () {\n\n\t\tthis._x *= - 1;\n\t\tthis._y *= - 1;\n\t\tthis._z *= - 1;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t},\n\n\tnormalize: function () {\n\n\t\tvar l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( q, p ) {\n\n\t\tif ( p !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t}\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t},\n\n\tpremultiply: function ( q ) {\n\n\t\treturn this.multiplyQuaternions( q, this );\n\n\t},\n\n\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tslerp: function ( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\tvar s = 1 - t;\n\t\t\tthis._w = s * w + t * this._w;\n\t\t\tthis._x = s * x + t * this._x;\n\t\t\tthis._y = s * y + t * this._y;\n\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\treturn this.normalize();\n\n\t\t}\n\n\t\tvar sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis.onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t},\n\n\tonChange: function ( callback ) {\n\n\t\tthis.onChangeCallback = callback;\n\n\t\treturn this;\n\n\t},\n\n\tonChangeCallback: function () {}\n\n} );\n\n\nexport { Quaternion };\n"],"sourceRoot":""}